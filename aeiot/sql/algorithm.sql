insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Brent's algorithm","finds a cycle in function value iterations using only two iterators", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Floyd's cycle-finding algorithm","finds a cycle in function value iterations", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Gale–Shapley algorithm","solves the stable marriage problem", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Coloring algorithm","Graph coloring algorithm.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Hopcroft–Karp algorithm","convert a bipartite graph to a maximum cardinality matching", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Hungarian algorithm","algorithm for finding a perfect matching", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Prüfer coding","conversion between a labeled tree and its Prüfer sequence", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Tarjan's off-line least common ancestors algorithm","compute lowest common ancestors for pairs of nodes in a tree", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Topological sort","finds linear order of nodes (e.g. jobs) based on their dependencies.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Girvan–Newman algorithm","detect communities in complex systems", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Hyperlink-Induced Topic Search (HITS) (also known as Hubs and authorities)","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("PageRank","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("TrustRank","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Dinic's algorithm","is a strongly polynomial algorithm for computing the maximum flow in a flow network.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Edmonds–Karp algorithm","implementation of Ford–Fulkerson", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Ford–Fulkerson algorithm","computes the maximum flow in a graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Karger's algorithm","a Monte Carlo method to compute the minimum cut of a connected graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Push–relabel algorithm","computes a maximum flow in a graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Edmonds's algorithm (also known as Chu–Liu/Edmonds's algorithm)","find maximum or minimum branchings", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Euclidean minimum spanning tree","algorithms for computing the minimum spanning tree of a set of points in the plane", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Euclidean shortest path problem","find the shortest path between two points that does not intersect any obstacle", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Longest path problem","find a simple path of maximum length in a given graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Boruvka's algorithm","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Kruskal's algorithm","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Prim's algorithm","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Reverse-delete algorithm","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Bellman–Ford algorithm","computes shortest paths in a weighted graph (where some of the edge weights may be negative)", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Dijkstra's algorithm","computes shortest paths in a graph with non-negative edge weights", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Floyd–Warshall algorithm","solves the all pairs shortest path problem in a weighted", "directed graph","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Johnson algorithm","All pairs shortest path algorithm in sparse weighted directed graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("A*","special case of best-first search that uses heuristics to improve speed", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("B*","a best-first graph search algorithm that finds the least-cost path from a given initial node to any goal node (out of one or more possible goals)", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Backtracking","abandon partial solutions when they are found not to satisfy a complete solution", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Beam search","is a heuristic search algorithm that is an optimization of best-first search that reduces its memory requirement", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Beam stack search","integrates backtracking with beam search", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Best-first search","traverses a graph in the order of likely importance using a priority queue", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Bidirectional search","find the shortest path from an initial vertex to a goal vertex in a directed graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Bloom filter","a constant time and memory check to see whether a given element exists in a set. May return a false positive", "but never a false negative.","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Breadth-first search","traverses a graph level by level", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("D*","an incremental heuristic search algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Depth-first search","traverses a graph branch by branch", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Dijkstra's algorithm","A special case of A* for which no heuristic function is used", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("General Problem Solver","a seminal theorem-proving algorithm intended to work as a universal problem solver machine.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Iterative deepening depth-first search (IDDFS)","a state space search strategy", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Jump point search","An optimization to A* which may reduce computation time by an order of magnitude using further heuristics.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Lexicographic breadth-first search (also known as Lex-BFS)","a linear time algorithm for ordering the vertices of a graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Uniform-cost search","a tree search that finds the lowest cost route where costs vary", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("SSS*","state space search traversing a game tree in a best-first fashion similar to that of the A* search algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Bron–Kerbosch algorithm","a technique for finding maximal cliques in an undirected graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("MaxCliqueDyn maximum clique algorithm","find a maximum clique in an undirected graph", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Daitch–Mokotoff Soundex","a Soundex refinement which allows matching of Slavic and Germanic surnames", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Double Metaphone","an improvement on Metaphone", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Match Rating Approach","a phonetic algorithm developed by Western Airlines", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Metaphone","an algorithm for indexing words by their sound", "when pronounced in English","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("NYSIIS","phonetic algorithm", "improves on Soundex","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Soundex","a phonetic algorithm for indexing names by sound", "as pronounced in English","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("String metrics","compute a similarity or dissimilarity (distance) score between two pairs of text strings", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Damerau–Levenshtein distance compute a distance measure between two strings","improves on Levenshtein distance", "","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Dice's coefficient (also known as the Dice coefficient)","a similarity measure related to the Jaccard index", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Hamming distance","sum number of positions which are different", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Jaro–Winkler distance","is a measure of similarity between two strings", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Levenshtein edit distance","compute a metric for the amount of difference between two sequences", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Trigram search","search for text when the exact syntax or spelling of the target object is not precisely known", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Buchberger's algorithm","finds a Gröbner basis", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Cantor–Zassenhaus algorithm","factor polynomials over finite fields", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Faugère F4 algorithm","finds a Gröbner basis (also mentions the F5 algorithm)", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Gosper's algorithm","find sums of hypergeometric terms that are themselves hypergeometric terms", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Knuth–Bendix completion algorithm","for rewriting rule systems", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Multivariate division algorithm","for polynomials in several indeterminates", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Pollard's kangaroo algorithm (also known as Pollard's lambda algorithm )","an algorithm for solving the discrete logarithm problem", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Polynomial long division","an algorithm for dividing a polynomial by another polynomial of the same or lower degree", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Risch algorithm","an algorithm for the calculus operation of indefinite integration (i.e. finding antiderivatives)", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Average-linkage clustering","a simple agglomerative clustering algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Canopy clustering algorithm","an unsupervised pre-clustering algorithm related to the K-means algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Complete-linkage clustering","a simple agglomerative clustering algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("DBSCAN","a density based clustering algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Expectation-maximization algorithm","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Fuzzy clustering","a class of clustering algorithms where each point has a degree of belonging to clusters", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Fuzzy c-means","", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("FLAME clustering (Fuzzy clustering by Local Approximation of MEmberships)","define clusters in the dense parts of a dataset and perform cluster assignment solely based on the neighborhood relationships among objects", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("KHOPCA clustering algorithm","a local clustering algorithm", "which produces hierarchical multi-hop clusters in static and mobile environments.","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("k-means clustering","cluster objects based on attributes into partitions", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("k-means++","a variation of this", "using modified random seeds","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("k-medoids","similar to k-means", "but chooses datapoints or medoids as centers","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Linde–Buzo–Gray algorithm","a vector quantization algorithm to derive a good codebook", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Lloyd's algorithm (Voronoi iteration or relaxation)","group data points into a given number of categories", "a popular algorithm for k-means clustering","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("OPTICS","a density based clustering algorithm with a visual evaluation method", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Single-linkage clustering","a simple agglomerative clustering algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("SUBCLU","a subspace clustering algorithm", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Ward's method","an agglomerative clustering algorithm", "extended to more general Lance–Williams algorithms","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("WACA clustering algorithm","a local clustering algorithm with potentially multi-hop structures; for dynamic networks", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Backpropagation","A supervised learning method which requires a teacher that knows, or can calculate, the desired output for any given input","","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Hopfield net","a Recurrent neural network in which all connections are symmetric", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Perceptron","the simplest kind of feedforward neural network", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Pulse-coupled neural networks (PCNN)","neural models proposed by modeling a cat's visual cortex and developed for high-performance biomimetic image processing.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Radial basis function network","an artificial neural network that uses radial basis functions as activation functions", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Self-organizing map","an unsupervised network that produces a low-dimensional representation of the input space of the training samples", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("AdaBoost","adaptive boosting", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("BrownBoost","a boosting algorithm that may be robust to noisy datasets", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("LogitBoost","logistic regression boosting", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("LPBoost","linear programming boosting", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Backpropagation","A supervised learning method which requires a teacher that knows, or can calculate,the desired output for any given input","","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Hopfield net","a Recurrent neural network in which all connections are symmetric", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Perceptron","the simplest kind of feedforward neural network", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Pulse-coupled neural networks (PCNN)","neural models proposed by modeling a cat's visual cortex and developed for high-performance biomimetic image processing.", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Radial basis function network","an artificial neural network that uses radial basis functions as activation functions", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Self-organizing map","an unsupervised network that produces a low-dimensional representation of the input space of the training samples", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("CYK algorithm","An O(n3) algorithm for parsing context-free grammars in Chomsky normal form", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Earley parser","Another O(n3) algorithm for parsing any context-free grammar", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("GLR parser","An algorithm for parsing any context-free grammar by Masaru Tomita. It is tuned for deterministic grammars", "on which it performs almost linear time and O(n3) in worst case.","","1","2","1");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("Inside-outside algorithm","An O(n3) algorithm for re-estimating production probabilities in probabilistic context-free grammars", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("LL parser","A relatively simple linear time parsing algorithm for a limited class of context-free grammars", "","1","2","1","2");
insert into djtesta.aeiot_algorithm(name, semantics, source_code, version, supplier_id, input_format_id, output_format_id) values ("LR parser","A more complex linear time parsing algorithm for a larger class of context-free grammars.", "","1","2","1","2");
